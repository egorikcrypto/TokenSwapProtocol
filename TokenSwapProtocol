// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract TokenSwapProtocol {
    address public token1;
    address public token2;
    address public owner;

    event Swap(address indexed sender, uint256 amount, address indexed fromToken, address indexed toToken);

    constructor(address _token1, address _token2) {
        token1 = _token1;
        token2 = _token2;
        owner = msg.sender;
    }

    function swap(uint256 amount, address fromToken, address toToken) external {
        require(fromToken == token1 || fromToken == token2, "Invalid from token");
        require(toToken == token1 || toToken == token2, "Invalid to token");
        require(fromToken != toToken, "Tokens must be different");

        if (fromToken == token1) {
            require(IERC20(token1).allowance(msg.sender, address(this)) >= amount, "Token1 allowance too low");
            require(IERC20(token1).balanceOf(msg.sender) >= amount, "Insufficient Token1 balance");

            IERC20(token1).transferFrom(msg.sender, address(this), amount);
            IERC20(token2).transfer(msg.sender, amount);
        } else {
            require(IERC20(token2).allowance(msg.sender, address(this)) >= amount, "Token2 allowance too low");
            require(IERC20(token2).balanceOf(msg.sender) >= amount, "Insufficient Token2 balance");

            IERC20(token2).transferFrom(msg.sender, address(this), amount);
            IERC20(token1).transfer(msg.sender, amount);
        }

        emit Swap(msg.sender, amount, fromToken, toToken);
    }

    function withdrawTokens(address token, uint256 amount) external {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        IERC20(token).transfer(owner, amount);
    }

    function withdrawETH() external {
        require(msg.sender == owner, "Only owner can withdraw ETH");
        payable(owner).transfer(address(this).balance);
    }
}
